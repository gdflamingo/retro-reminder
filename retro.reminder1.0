import sys
import time
import threading
import requests
import schedule
import pygame
from datetime import datetime, timedelta

# -------------------- Configuration --------------------
# Events configuration
events = [
    {"name": "Team Meeting", "datetime": "2025-06-01 15:00"},
]

# Currency pairs (fiat) and cryptocurrencies
currency_pairs = [("USD", "BRL"), ("EUR", "USD")]
crypto_list = ["bitcoin", "ethereum", "dogecoin"]  # use CoinGecko IDs

update_interval = 60  # seconds for all fetches

# Weather API
weather_api_key = "YOUR_OPENWEATHERMAP_API_KEY"
location = "São Paulo,BR"

# Mascot settings: choose 'cat', 'bird', or 'frog'
mascot_type = 'cat'
last_interaction = datetime.now()
mascot_state = 'idle'  # 'idle', 'action', 'sunglasses', 'sleep'
action_timer = None

# Interaction timeout
sleep_timeout = timedelta(seconds=60)

# -------------------- Pygame setup --------------------
pygame.init()
WIDTH, HEIGHT = 700, 380
display = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Retro Notifier")
font = pygame.font.SysFont('Courier', 16)
clock = pygame.time.Clock()

# Colors
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)

# Notification queue
notifications = []
lock = threading.Lock()

# Input/edit state placeholders (omitted for brevity)
# ...

# -------------------- Data Fetch Functions --------------------

def fetch_fiat_quotes():
    try:
        quotes = []
        for base, target in currency_pairs:
            resp = requests.get(
                f"https://api.exchangerate.host/latest?base={base}&symbols={target}")
            rate = resp.json()['rates'][target]
            quotes.append(f"{base}/{target}: {rate:.2f}")
        with lock:
            notifications.append(("Fiat", " | ".join(quotes)))
    except Exception as e:
        with lock:
            notifications.append(("Error", f"Fiat fetch: {e}"))


def fetch_crypto_quotes():
    try:
        ids = ",".join(crypto_list)
        resp = requests.get(
            f"https://api.coingecko.com/api/v3/simple/price?ids={ids}&vs_currencies=usd")
        data = resp.json()
        quotes = [f"{name.capitalize()}: ${data[name]['usd']:.2f}" for name in crypto_list]
        with lock:
            notifications.append(("Crypto", " | ".join(quotes)))
    except Exception as e:
        with lock:
            notifications.append(("Error", f"Crypto fetch: {e}"))

weather_info = {"temp": None, "condition": None}

def fetch_weather():
    try:
        url = (
            f"http://api.openweathermap.org/data/2.5/weather"
            f"?q={location}&appid={weather_api_key}&units=metric"
        )
        data = requests.get(url).json()
        weather_info['temp'] = data['main']['temp']
        weather_info['condition'] = data['weather'][0]['main']
    except Exception as e:
        weather_info['temp'] = None
        weather_info['condition'] = None
        with lock:
            notifications.append(("Error", f"Weather fetch: {e}"))

# -------------------- Event Check --------------------

def check_events():
    now = datetime.now().strftime("%Y-%m-%d %H:%M")
    for ev in events:
        if ev['datetime'].startswith(now):
            with lock:
                notifications.append(("Event", ev['name']))

# -------------------- Scheduler Thread --------------------

def scheduler_thread():
    schedule.every(update_interval).seconds.do(fetch_fiat_quotes)
    schedule.every(update_interval).seconds.do(fetch_crypto_quotes)
    schedule.every(update_interval).seconds.do(fetch_weather)
    schedule.every(1).minutes.do(check_events)
    while True:
        schedule.run_pending()
        time.sleep(1)

# -------------------- Mascot Behavior (omitted) --------------------
# update_mascot_state, trigger_action, draw_mascot
# ...

# -------------------- Drawing Functions --------------------

def draw_weather(x, y):
    if weather_info['temp'] is not None:
        temp_text = font.render(f"{weather_info['temp']:.1f}°C", False, WHITE)
        display.blit(temp_text, (x, y))
        cond = weather_info['condition']
        if cond == 'Clear': pygame.draw.circle(display, WHITE, (x+80, y+10), 8)
        elif cond == 'Rain': pygame.draw.line(display, WHITE, (x+75, y+5), (x+85, y+15), 2)
        else: pygame.draw.circle(display, WHITE, (x+80, y+10), 8, 2)


def draw_notifications():
    display.fill(BLACK)
    # Weather display
    draw_weather(10, 10)
    # Notifications (fiat, crypto, events)
    with lock:
        for i, (typ, msg) in enumerate(notifications[-5:]):
            txt = font.render(f"[{typ}] {msg}", False, WHITE)
            display.blit(txt, (10, 40 + i * 20))
    # Mascot and other UI omitted for brevity
    # draw_mascot()

# -------------------- Main Loop --------------------

def main():
    threading.Thread(target=scheduler_thread, daemon=True).start()
    while True:
        for evt in pygame.event.get():
            if evt.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            elif evt.type == pygame.KEYDOWN:
                # interaction logic
                if evt.key == pygame.K_SPACE:
                    trigger_action()
        update_mascot_state()
        draw_notifications()
        pygame.display.update()
        clock.tick(30)

if __name__ == '__main__':
    main()
